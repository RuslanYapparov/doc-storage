let isFirstSearch = true;

function resetSearchFlag() {
    isFirstSearch = true;
}

function toggleSortMenu() {
    const menu = document.getElementById('sortMenu');
    menu.style.display = menu.style.display === 'none' ? 'block' : 'none';
}

function toggleSearchMenu() {
    const searchMenu = document.getElementById("searchMenu");
    const loadMoreButton = document.getElementById("loadMoreButton");

    if (searchMenu.style.display === 'none') {
        searchMenu.style.display = 'block';
        loadMoreButton.disabled = true;
    } else {
        searchMenu.style.display = 'none';
        loadMoreButton.disabled = false;
    }
}

function addDocumentsToGrid(docs) {
    const grid = document.getElementById("documentGrid");

    docs.forEach((doc) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        const existingRow = Array.from(grid.rows).find(
            (row) => row.dataset.id === String(doc.id)
        );

        if (!existingRow) {
            const row = grid.insertRow();
            row.dataset.id = doc.id;

            row.innerHTML = `
            <td>${doc.title || ""}</td>
            <td>${doc.description || ""}</td>
            <td>${doc.ownerName || ""}</td>
            <td>${doc.fileName || ""}</td>
            <td>${doc.createdAt || ""}</td>
            <td>${doc.commonAccessType || ""}</td>
            <td>${doc.updatedBy || ""}</td>
            <td>${doc.updatedAt || ""}</td>
            <td class="action-buttons">
                ${
                    doc.fileName.endsWith(".docx") || doc.fileName.endsWith(".pdf")
                        ?
                          `<button class="btn btn-sm btn-secondary" onclick="openDocument(${doc.id})">üßæ</button>
                           <button class="btn btn-sm btn-secondary" onclick="downloadDocument(${doc.id}, '${doc.fileName}')">üîΩ</button>
                           <button class="btn btn-sm btn-secondary" onclick="deleteDocument(${doc.id}, this)">‚ùå</button>`
                        :
                          `<button class="btn btn-sm btn-secondary" onclick="downloadDocument(${doc.id}, '${doc.fileName}')">üîΩ</button>
                           <button class="btn btn-sm btn-secondary" onclick="deleteDocument(${doc.id}, this)">‚ùå</button>`
                }
            </td>
            `;
        }
    });
}

function openDocument(id) {
    console.log(`–ó–∞–ø—Ä–æ—Å –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å ID: ${id}`);

    const viewerSpace = document.getElementById("viewerSpace"); // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const docxViewer = document.getElementById("docxViewer"); // –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è .docx –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const documentViewer = document.getElementById("documentViewer"); // –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PDF
    const workspace = document.querySelector(".workspace"); // –ö–æ–Ω—Ç–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏

    if (!viewerSpace || !docxViewer || !documentViewer || !workspace) {
        console.error("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.");
        return;
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å
    viewerSpace.style.display = "flex";
    workspace.style.display = "none";

    fetch(`/api/v1/docs/open/${id}`)
        .then((response) => {
        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞");
        }
        return response.blob();
    })
        .then((blob) => {
        const fileType = blob.type;

        if (fileType === "application/pdf") {
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ PDF
            documentViewer.style.display = "block";
            docxViewer.style.display = "none";
            documentViewer.src = URL.createObjectURL(blob);
        } else if (fileType === "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ DOCX —á–µ—Ä–µ–∑ Mammoth.js
            documentViewer.style.display = "none";
            docxViewer.style.display = "block";

            const reader = new FileReader();
            reader.onload = function (event) {
                const arrayBuffer = event.target.result;
                mammoth.extractRawText({ arrayBuffer: arrayBuffer })
                    .then((result) => {
                    docxViewer.innerHTML = `<div class="docx-content">${result.value}</div>`; // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                })
                    .catch((error) => {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å Mammoth.js:", error);
                    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç");
                });
            };
            reader.readAsArrayBuffer(blob);
        } else {
            alert("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞");
            closeViewer();
        }
    })
        .catch((error) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.");
    });
}

function closeViewer() {
    const viewerSpace = document.getElementById("viewerSpace");
    const documentViewer = document.getElementById("documentViewer");
    const workspace = document.querySelector(".workspace");

    viewerSpace.style.display = "none";
    workspace.style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ

    // –£–±–∏—Ä–∞–µ–º src –∏–∑ <embed> (—á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
    documentViewer.src = "";
}

function downloadDocument(id, fileName) {
    fetch(`/api/v1/docs/${id}`, {
        method: 'GET',
        credentials: 'same-origin', // –í–∞–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫—É–∫–∏
    })
        .then((response) => {
        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.");
        }
        return response.blob();
    })
        .then((blob) => {
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = fileName;
        a.click();
        URL.revokeObjectURL(url); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ–±—ä–µ–∫—Ç URL –∏–∑ –ø–∞–º—è—Ç–∏
    })
        .catch((error) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.");
    });
}

function deleteDocument(id, button) {
    if (!confirm("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?")) {
        return;
    }

    fetch(`/api/v1/docs/${id}`, {
        method: 'DELETE',
        credentials: 'same-origin', // –ü–µ—Ä–µ–¥–∞—á–∞ –∫—É–∫–∏
    })
        .then((response) => {
        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.");
        }
        console.log(`–î–æ–∫—É–º–µ–Ω—Ç —Å ID ${id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`);

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
        const row = button.closest("tr");
        if (row) {
            const buttons = row.querySelectorAll("button");
            buttons.forEach((btn) => {
                btn.setAttribute("disabled", "true"); // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            row.classList.add("marked-for-deletion");
        }
    })
        .catch((error) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.");
    });
}

function formatDateToBackend(date) {
    const [year, month, day] = date.split("-");
    return `${day}.${month}.${year}`;
}

function logout() {
    if (!confirm("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?")) {
        return;
    }

    fetch('/perform-logout', {
        method: 'POST',
        credentials: 'same-origin', // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏
    })
        .then((response) => {
        if (response.ok) {
            console.log("Logout —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.");
            window.location.href = '/'; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã—Ö–æ–¥–∞.');
        }
    })
        .catch((error) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ logout:", error);
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    });
}